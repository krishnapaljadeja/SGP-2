<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuiziFY - Profile</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      tailwind.config = {
        darkMode: 'class',
        theme: {
          extend: {
            fontFamily: {
              'inter': ['Inter', 'sans-serif'],
            },
            colors: {
              primary: {
                50: '#f0f9ff',
                500: '#0ea5e9',
                600: '#0284c7',
                700: '#0369a1',
              },
              secondary: {
                500: '#d946ef',
                600: '#c026d3',
              },
              dark: {
                50: '#f8fafc',
                300: '#cbd5e1',
                400: '#94a3b8',
                500: '#64748b',
                600: '#475569',
                700: '#334155',
                800: '#1e293b',
                900: '#0f172a',
              }
            },
            animation: {
              'fade-in': 'fadeIn 0.5s ease-out',
              'slide-up': 'slideUp 0.6s ease-out',
              'float': 'float 3s ease-in-out infinite',
            },
            keyframes: {
              fadeIn: {
                '0%': { opacity: '0', transform: 'translateY(10px)' },
                '100%': { opacity: '1', transform: 'translateY(0)' },
              },
              slideUp: {
                '0%': { opacity: '0', transform: 'translateY(30px)' },
                '100%': { opacity: '1', transform: 'translateY(0)' },
              },
              float: {
                '0%, 100%': { transform: 'translateY(0px)' },
                '50%': { transform: 'translateY(-10px)' },
              }
            }
          }
        }
      }
    </script>
    <style>
      body {
        font-family: 'Inter', sans-serif;
      }
      .gradient-text {
        background: linear-gradient(135deg, #0ea5e9, #d946ef);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      .glass-effect {
        backdrop-filter: blur(16px);
        -webkit-backdrop-filter: blur(16px);
      }
    </style>
</head>
<body class="bg-dark-900 text-white transition-colors duration-300">
    <!-- Theme Toggle Script -->
    <script>
      function initializeTheme() {
        const savedTheme = localStorage.getItem('theme');
        const theme = savedTheme || 'dark';
        
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
          document.body.classList.add('dark');
          document.body.className = 'bg-dark-900 text-white transition-colors duration-300';
        } else {
          document.documentElement.classList.remove('dark');
          document.body.classList.remove('dark');
          document.body.className = 'bg-gray-50 text-gray-900 transition-colors duration-300';
        }
        
        localStorage.setItem('theme', theme);
      }
      
      initializeTheme();
    </script>

    <!-- Navigation -->
    <nav class="fixed top-0 w-full z-50 glass-effect bg-dark-800/80 border-b border-dark-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center h-16">
          <div class="flex items-center space-x-4">
            <a href="/student-dashboard" class="flex items-center space-x-2 text-primary-400 hover:text-primary-300 transition-colors duration-200">
              <span class="material-symbols-outlined">arrow_back</span>
              <span class="hidden sm:inline">Dashboard</span>
            </a>
            <div class="flex items-center space-x-2">
              <div class="w-8 h-8 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-lg flex items-center justify-center">
                <span class="material-symbols-outlined text-white text-lg">quiz</span>
              </div>
              <h1 class="text-xl md:text-2xl font-bold gradient-text">QUIZIFY</h1>
            </div>
          </div>
          
          <form action="/logout" method="post">
            <button class="px-3 md:px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors duration-200 text-sm md:text-base">
              <span class="material-symbols-outlined md:mr-2">logout</span>
              <span class="hidden md:inline">Logout</span>
            </button>
          </form>
        </div>
      </div>
    </nav>
    
    <!-- Main Content -->
    <main class="pt-20 pb-8 px-4 sm:px-6 lg:px-8">
      <div class="max-w-7xl mx-auto">
        <div class="grid lg:grid-cols-3 gap-6 md:gap-8">
          <!-- Profile Info Card -->
          <div class="lg:col-span-1">
            <div class="glass-effect bg-dark-800/50 border border-dark-700 rounded-2xl p-6 animate-fade-in">
              <!-- Profile Header -->
              <div class="text-center mb-6">
                <div class="w-20 h-20 md:w-24 md:h-24 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-float">
                  <span class="text-2xl md:text-3xl font-bold text-white">
                    <%= (user.name || 'U')[0].toUpperCase() %>
                  </span>
                </div>
                <h2 class="text-xl md:text-2xl font-bold text-white mb-2">
                  <%= user.displayName || user.name %>
                </h2>
                <p class="text-dark-300 text-sm md:text-base"><%= user.email %></p>
                <p class="text-dark-400 text-xs md:text-sm mt-1">
                  <%= user.role %> â€¢ Joined <%= moment(user.joinDate).format('MMMM YYYY') %>
                </p>
                <button onclick="toggleEditMode()" 
                        class="mt-4 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition-colors duration-200 text-sm">
                  <span class="material-symbols-outlined mr-2 text-sm">edit</span>
                  Edit Profile
                </button>
              </div>

              <!-- Statistics Grid -->
              <div class="grid grid-cols-1 gap-4">
                <div class="bg-dark-700/50 rounded-xl p-4 text-center">
                  <div class="flex items-center justify-center mb-2">
                    <span class="material-symbols-outlined text-primary-400 mr-2">quiz</span>
                    <span class="text-2xl font-bold text-white"><%= stats.totalAttempts %></span>
                  </div>
                  <p class="text-dark-300 text-sm">Total Attempts</p>
                </div>
                
                <div class="bg-dark-700/50 rounded-xl p-4 text-center">
                  <div class="flex items-center justify-center mb-2">
                    <span class="material-symbols-outlined text-green-400 mr-2">task_alt</span>
                    <span class="text-2xl font-bold text-white"><%= stats.completionRate %>%</span>
                  </div>
                  <p class="text-dark-300 text-sm">Completion Rate</p>
                </div>
                
                <div class="bg-dark-700/50 rounded-xl p-4 text-center">
                  <div class="flex items-center justify-center mb-2">
                    <span class="material-symbols-outlined text-yellow-400 mr-2">grade</span>
                    <span class="text-2xl font-bold text-white"><%= stats.averageScore %>%</span>
                  </div>
                  <p class="text-dark-300 text-sm">Average Score</p>
                </div>
              </div>

              <!-- Latest Attempt -->
              <% if (latestAttempt) { %>
              <div class="mt-6 bg-gradient-to-r from-primary-500/20 to-secondary-500/20 rounded-xl p-4 border border-primary-500/30">
                <h3 class="text-lg font-semibold text-white mb-2">Latest Quiz</h3>
                <p class="text-dark-300 text-sm mb-2"><%= latestAttempt.quiz.title %></p>
                <div class="flex items-center justify-between">
                  <span class="text-2xl font-bold gradient-text">
                    <%= latestAttempt.percentage.toFixed(1) %>%
                  </span>
                  <span class="text-xs text-dark-400">
                    <%= moment(latestAttempt.completedAt).format('MMM Do, h:mm a') %>
                  </span>
                </div>
              </div>
              <% } %>
            </div>
          </div>

          <!-- Performance Chart Card -->
          <div class="lg:col-span-2">
            <div class="glass-effect bg-dark-800/50 border border-dark-700 rounded-2xl p-6 animate-fade-in" style="animation-delay: 0.1s;">
              <div class="flex flex-col md:flex-row md:items-center justify-between mb-6">
                <div>
                  <h2 class="text-xl md:text-2xl font-bold text-white mb-2">Performance History</h2>
                  <p class="text-dark-300 text-sm">Your quiz scores over time</p>
                </div>
                <button onclick="updateChartView('all')" 
                        class="mt-4 md:mt-0 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition-colors duration-200 text-sm">
                  All Time
                </button>
              </div>
              
              <div class="h-64 md:h-80">
                <canvas id="performanceChart"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <script>
        // Initialize chart with clean configuration
        function initializeChart() {
            const ctx = document.getElementById('performanceChart').getContext('2d');
            const performanceData = <%- JSON.stringify(performanceData || []) %>;
    
            return new Chart(ctx, {
                type: 'line',
                data: {
                    labels: performanceData.map(d => d.quizName),
                    datasets: [{
                        label: 'Quiz Scores',
                        data: performanceData.map(d => d.score),
                        borderColor: '#0ea5e9',
                        backgroundColor: 'rgba(14, 165, 233, 0.1)',
                        tension: 0.4,
                        fill: true,
                        pointBackgroundColor: '#0ea5e9',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: '#0ea5e9',
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#94a3b8',
                                callback: value => `${value}%`
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: '#94a3b8',
                                maxRotation: 45,
                                minRotation: 45
                            }
                        }
                    },
                    plugins: {
                        legend: { 
                            display: false 
                        },
                        tooltip: {
                            backgroundColor: 'rgba(30, 41, 59, 0.9)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: '#475569',
                            borderWidth: 1,
                            padding: 10,
                            callbacks: {
                                label: context => `Score: ${context.parsed.y}%`
                            }
                        }
                    }
                }
            });
        }
    
        // Profile edit functionality
        function toggleEditMode() {
            const profileInfo = document.querySelector('.text-center');
            const currentName = '<%= user.displayName || user.name %>';
            
            // Create edit form (simplified for mobile)
            const editForm = `
                <form id="editProfileForm" onsubmit="updateProfile(event)" class="space-y-4">
                    <div class="w-20 h-20 md:w-24 md:h-24 bg-gradient-to-r from-primary-500 to-secondary-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-float">
                        <span class="text-2xl md:text-3xl font-bold text-white">
                            <%= (user.name || 'U')[0].toUpperCase() %>
                        </span>
                    </div>
                    <div>
                        <label for="displayName" class="block text-sm font-medium text-white mb-2">Display Name</label>
                        <input type="text"
                               id="displayName"
                               name="displayName"
                               value="${currentName}"
                               required
                               minlength="2"
                               maxlength="50"
                               class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-dark-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200">
                    </div>
                    <div class="flex space-x-2">
                        <button type="submit" class="flex-1 px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg font-medium transition-colors duration-200 text-sm">
                            <span class="material-symbols-outlined mr-1 text-sm">save</span>
                            Save
                        </button>
                        <button type="button" 
                                onclick="location.reload()" 
                                class="flex-1 px-4 py-2 bg-dark-600 hover:bg-dark-500 text-white rounded-lg font-medium transition-colors duration-200 text-sm">
                            <span class="material-symbols-outlined mr-1 text-sm">close</span>
                            Cancel
                        </button>
                    </div>
                </form>
            `;
            
            profileInfo.innerHTML = editForm;
        }
    
        // Update chart view based on time period
        function updateChartView(period) {
            // For now, just show all data
            const performanceData = <%- JSON.stringify(performanceData || []) %>;
            chart.data.labels = performanceData.map(d => d.quizName);
            chart.data.datasets[0].data = performanceData.map(d => d.score);
            chart.update();
        }
    
        // Profile update functionality
        async function updateProfile(event) {
            event.preventDefault();
            const form = event.target;
            const formData = new FormData(form);
    
            try {
                const response = await fetch('/profile/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(Object.fromEntries(formData))
                });
    
                const data = await response.json();
                
                if (data.success) {
                    showNotification('Profile updated successfully', 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(data.message || 'Update failed', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showNotification('Error updating profile', 'error');
            }
        }
    
        // Notification helper
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${type === 'success' ? 'bg-green-600' : 'bg-red-600'}`;
            notification.textContent = message;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }
    
        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize chart
            const chart = initializeChart();
        });
    </script>
</body>
</html>